name: Backend Build and Deploy
on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/backend-build-and-deploy.yaml
      - backend/packages/Schedular/**
      - backend/packages/Upgrade/**
      - backend/Docker*
      - backend/package*.json
jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.repository_owner == 'CarnegieLearningWeb'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - name: Install zip
        uses: montudor/action-zip@v0.1.1
      - uses: jitterbit/get-changed-files@v1
        id: changed-files
      - shell: bash
        run: |
          BUILD_LAMBDA=false
          BUILD_BACKEND=false
          BACKEND_FILES=".github/workflows/backend backend/packages/Upgrade backend/Docker backend/package"
          LAMBDA_FILES=".github/workflows/backend backend/packages/Schedular"
          for changed_file in ${{ steps.changed-files.outputs.all }}; do
            for backend_file in $BACKEND_FILES; do
              [[ $changed_file == ${backend_file}* ]] && BUILD_BACKEND=true
            done
            for lambda_file in $LAMBDA_FILES; do
              [[ $changed_file == ${lambda_file}* ]] && BUILD_LAMBDA=true
            done
          done
          echo "BUILD_LAMBDA=$BUILD_LAMBDA" >> $GITHUB_ENV
          echo "BUILD_BACKEND=$BUILD_BACKEND" >> $GITHUB_ENV
      - uses: phips28/gh-action-bump-version@v8.0.18
        if: env.BUILD_BACKEND == 'true'
        with:
          tag-prefix: upgrade-backend-
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGEJSON_DIR: backend/packages/Upgrade
      - uses: phips28/gh-action-bump-version@v8.0.18
        if: env.BUILD_LAMBDA == 'true'
        with:
          tag-prefix: upgrade-lambda-
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGEJSON_DIR: backend/packages/Schedular
      - name: Get Backend Package Version
        uses: martinbeentjes/npm-get-version-action@v1.1.0
        id: backend-package
        with:
          path: backend/packages/Upgrade
      - name: Get Lambda Package Version
        uses: martinbeentjes/npm-get-version-action@v1.1.0
        id: lambda-package
        with:
          path: backend/packages/Schedular
      - name: Generate Release Changelog
        uses: Bullrich/generate-release-changelog@2.0.1
        id: changelog
        env:
          REPO: ${{ github.repository }}
      - name: Generate Slack Changelog
        id: last-setup-step
        run: |
          echo 'CHANGELOG<<EOF' >> $GITHUB_ENV
          git log --color=never --pretty='tformat:%xe2%x80%xa2 `%h` %s (%an)' ${{github.event.before}}..HEAD >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      
########################### Backend Build Steps ###########################

      - name: Backend Npm Install
        run: npm ci
        if: env.BUILD_BACKEND == 'true'
        working-directory: backend
      - name: Create Backend Zip Artifact
        if: env.BUILD_BACKEND == 'true'
        run: zip -qq -r upgrade-backend-v${{ steps.backend-package.outputs.current-version}}.zip node_modules packages/Upgrade Dockerfile Dockerrun.aws.json package.json tsconfig.json tslint.json
        working-directory: backend
      - name: Create Backend Release
        uses: ncipollo/release-action@v1
        if: env.BUILD_BACKEND == 'true'
        with:
          artifacts: backend/upgrade-backend-v${{ steps.backend-package.outputs.current-version}}.zip
          tag: upgrade-backend-v${{ steps.backend-package.outputs.current-version}}
          name: UpGrade Backend ${{ steps.backend-package.outputs.current-version}}
          body: ${{ steps.changelog.outputs.changelog }}
          commit: main
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Backend Success Build Message
        uses: aibexhq/slack-rich-notify@v2.0.1
        if: env.BUILD_BACKEND == 'true'
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channel: ${{ secrets.SLACK_BUILD_CHANNEL }}
          message: |
            *<https://github.com/${{ github.event.repository.full_name }}/releases/tag/upgrade-backend-v${{ steps.backend-package.outputs.current-version }}|UpGrade Backend ${{ steps.backend-package.outputs.current-version }}> build was successful*
            {{ env.CHANGELOG }}
      - name: Backend Failure Build Message
        uses: aibexhq/slack-rich-notify@v2.0.1
        if: failure() && env.BUILD_BACKEND == 'true'
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channel: ${{ secrets.SLACK_BUILD_CHANNEL }}
          message: |
            ${{ secrets.SLACK_FAILURE_PINGS}} *UpGrade Backend ${{ steps.backend-package.outputs.current-version }} build FAILURE*
            <https://github.com/${{ github.event.repository.full_name }}/actions/runs/${{ github.run_id }}|Click here to view the full log>
            {{ env.CHANGELOG }}

########################### Backend Deploy Steps ###########################

      - name: Deploy Backend to QA
        id: deploy-backend
        if: env.BUILD_BACKEND == 'true'
        uses: einaregilsson/beanstalk-deploy@v13
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME }}
          environment_name: ${{ secrets.EB_ENV_NAME }}
          version_label: ${{ steps.backend-package.outputs.current-version}}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: backend/upgrade-backend-v${{ steps.backend-package.outputs.current-version}}.zip
      - name: Success Deploy Message
        if: env.BUILD_BACKEND == 'true'
        uses: aibexhq/slack-rich-notify@v2.0.1
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channel: ${{ secrets.SLACK_DEPLOY_CHANNEL }}
          message: |
            *<https://github.com/${{ github.event.repository.full_name }}/releases/tag/upgrade-backend-v${{ steps.backend-package.outputs.current-version }}|UpGrade Backend ${{ steps.backend-package.outputs.current-version }}>* has been deployed to the `dev` environment at ${{ secrets.DEV_URL}}
            {{ env.CHANGELOG }}
      - name: Failure Deploy Message
        uses: aibexhq/slack-rich-notify@v2.0.1
        if: failure() && env.BUILD_BACKEND == 'true' && steps.deploy-backend.outcome == 'failure'
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channel: ${{ secrets.SLACK_DEPLOY_CHANNEL }}
          message: |
            ${{ secrets.SLACK_FAILURE_PINGS}} *<https://github.com/${{ github.event.repository.full_name }}/releases/tag/upgrade-backend-v${{ steps.backend-package.outputs.current-version }}|UpGrade Backend ${{ steps.backend-package.outputs.current-version }}> deployment FAILURE*
            <https://github.com/${{ github.event.repository.full_name }}/actions/runs/${{ github.run_id }}|Click here to view the full log>
            {{ env.CHANGELOG }}

########################### Lambda Build Steps ###########################
# Using always() along with checking the last step allows this to ignore failures in the backend build

      - name: Build Lambda
        working-directory: backend/packages/Schedular
        id: build-lambda
        if: always() && env.BUILD_LAMBDA == 'true' && steps.last-setup-step.outcome == 'success'
        run: |
          npm ci
          npm run build
          mkdir lib
          cp -a node_modules/ lib/node_modules
          cp -a dist/schedule lib/schedule
      - name: Package Lambda
        working-directory: backend/packages/Schedular/lib
        id: package-lambda
        if: always() && env.BUILD_LAMBDA == 'true' && steps.build-lambda.outcome == 'success'
        run: |
          zip -r upgrade-lambda-v${{ steps.lambda-package.outputs.current-version }}.zip *
      - name: Lambda Release
        uses: ncipollo/release-action@v1
        id: release-lambda
        if: always() && env.BUILD_LAMBDA == 'true' && steps.package-lambda.outcome == 'success'
        with:
          artifacts: backend/packages/Schedular/lib/upgrade-lambda-v${{ steps.lambda-package.outputs.current-version}}.zip
          tag: upgrade-lambda-v${{ steps.lambda-package.outputs.current-version}}
          name: UpGrade Lambda ${{ steps.lambda-package.outputs.current-version}}
          body: ${{ steps.changelog.outputs.changelog }}
          commit: main
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Lambda Success Build Message
        if: always() && env.BUILD_LAMBDA == 'true' && steps.release-lambda.outcome == 'success'
        uses: aibexhq/slack-rich-notify@v2.0.1
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channel: ${{ secrets.SLACK_BUILD_CHANNEL }}
          message: |
            *<https://github.com/${{ github.event.repository.full_name }}/releases/tag/upgrade-lambda-v${{ steps.lambda-package.outputs.current-version }}|UpGrade Lambda ${{ steps.lambda-package.outputs.current-version }}> build was successful*
            {{ env.CHANGELOG }}
      - name: Lambda Failure Build Message
        uses: aibexhq/slack-rich-notify@v2.0.1
        if: always() && env.BUILD_LAMBDA == 'true' && steps.release-lambda.outcome != 'success'
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channel: ${{ secrets.SLACK_BUILD_CHANNEL }}
          message: |
            ${{ secrets.SLACK_FAILURE_PINGS}} *UpGrade Lambda ${{ steps.lambda-package.outputs.current-version }} build FAILURE*
            <https://github.com/${{ github.event.repository.full_name }}/actions/runs/${{ github.run_id }}|Click here to view the full log>
            {{ env.CHANGELOG }}

########################### Lambda Deploy Steps ###########################

      - name: Deploy Lambda to dev
        uses: appleboy/lambda-action@v0.0.8
        id: deploy-lambda
        if: always() && env.BUILD_LAMBDA == 'true' && steps.release-lambda.outcome == 'success'
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          zip_file: backend/packages/Schedular/lib/upgrade-lambda-v${{ steps.lambda-package.outputs.current-version}}.zip
      - name: Lambda Success Deploy Message
        uses: aibexhq/slack-rich-notify@v2.0.1
        if: always() && env.BUILD_LAMBDA == 'true' && steps.deploy-lambda.outcome == 'success'
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channel: ${{ secrets.SLACK_DEPLOY_CHANNEL }}
          message: |
            *<https://github.com/${{ github.event.repository.full_name }}/releases/tag/upgrade-lambda-v${{ steps.lambda-package.outputs.current-version }}|UpGrade Lambda ${{ steps.lambda-package.outputs.current-version }}>* has been deployed to the `dev` environment
            {{ env.CHANGELOG }}
      - name: Lambda Failure Deploy Message
        uses: aibexhq/slack-rich-notify@v2.0.1
        if: failure() && env.BUILD_LAMBDA == 'true' && steps.deploy-lambda.outcome == 'failure'
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          channel: ${{ secrets.SLACK_DEPLOY_CHANNEL }}
          message: |
            ${{ secrets.SLACK_FAILURE_PINGS}} *<https://github.com/${{ github.event.repository.full_name }}/releases/tag/upgrade-lambda-v${{ steps.lambda-package.outputs.current-version }}|UpGrade Lambda ${{ steps.lambda-package.outputs.current-version }}> deployment FAILURE*
            <https://github.com/${{ github.event.repository.full_name }}/actions/runs/${{ github.run_id }}|Click here to view the full log>
            {{ env.CHANGELOG }}