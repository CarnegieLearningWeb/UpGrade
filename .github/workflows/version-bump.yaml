name: Version Bump
on:
  push:
    branches:
      - development
    paths-ignore:
      - 'clientlibs/**'
      - '**/*ignore'
      - '**/README.md'
      - '**/terraform/**'
      - '**/LICENCE'
      - '**/.prettier*'
      - '**/locust/**'
      - '**/.editoreconfig'
jobs:
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    if: github.repository_owner == 'PlaypowerLabs'
    steps:
      - uses: 'actions/checkout@v2'
        with:
          fetch-depth: 0
      - uses: jitterbit/get-changed-files@v1
        id: changed-files

      # Figure out which builds to run based on which files were changed
      # The *_FILES variables are lists of file prefixes
      - shell: bash
        run: |
          BUILD_LAMBDA=false
          BUILD_BACKEND=false
          BUILD_FRONTEND=false
          BACKEND_FILES=".github/workflows/backend backend/packages/Upgrade backend/Docker backend/package"
          LAMBDA_FILES=".github/workflows/lambda backend/packages/Schedular"
          FRONTEND_FILES=".github/workflows/frontend frontend/"
          for changed_file in ${{ steps.changed-files.outputs.all }}; do
            for backend_file in $BACKEND_FILES; do
              [[ $changed_file == ${backend_file}* ]] && BUILD_BACKEND=true
            done
            for lambda_file in $LAMBDA_FILES; do
              [[ $changed_file == ${lambda_file}* ]] && BUILD_LAMBDA=true
            done
            for frontend_file in $FRONTEND_FILES; do
              [[ $changed_file == ${frontend_file}* ]] && BUILD_FRONTEND=true
            done
          done
          echo "BUILD_LAMBDA=$BUILD_LAMBDA" >> $GITHUB_ENV
          echo "BUILD_BACKEND=$BUILD_BACKEND" >> $GITHUB_ENV
          echo "BUILD_FRONTEND=$BUILD_FRONTEND" >> $GITHUB_ENV

############################ Version bumps ############################

      # - name: Backend Version Bump
      #   id: backend-version-bump
      #   uses: phips28/gh-action-bump-version@v8.2.2
      #   if: env.BUILD_BACKEND == 'true'
      #   with:
      #     tag-prefix: upgrade-backend-
      #     major-wording: 'backend-major-version-bump'
      #     minor-wording: 'backend-minor-version-bump'
      #     commit-message: 'CI: bump version for backend to {{version}}'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PACKAGEJSON_DIR: backend/packages/Upgrade
      # - name: Frontend Version Bump
      #   id: frontend-version-bump
      #   uses: phips28/gh-action-bump-version@v8.2.2
      #   if: env.BUILD_FRONTEND == 'true'
      #   with:
      #     tag-prefix: upgrade-frontend-
      #     major-wording: 'frontend-major-version-bump'
      #     minor-wording: 'frontend-minor-version-bump'
      #     commit-message: 'CI: bump version for frontend to {{version}}'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PACKAGEJSON_DIR: frontend
      # - name: Lambda Version Bump
      #   id: lambda-version-bump
      #   uses: phips28/gh-action-bump-version@v8.2.2
      #   if: env.BUILD_LAMBDA == 'true'
      #   with:
      #     tag-prefix: lambda-frontend-
      #     major-wording: 'lambda-major-version-bump'
      #     minor-wording: 'lambda-minor-version-bump'
      #     commit-message: 'CI: bump version for lambda to {{version}}'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PACKAGEJSON_DIR: backend/packages/Schedular

############################ Trigger builds ############################
# Use always() to trigger builds even if other unrelated version bumps failed
# REPO_DISPATCH_TOKEN needs to be a personal access token that has repo access (can't use GITHUB_TOKEN)

      - name: Trigger Backend Build
        uses: peter-evans/repository-dispatch@v1
        if: always() && env.BUILD_BACKEND == 'true'
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ github.repository }}
          event-type: trigger-backend-build
          client-payload: '{"tag": "upgrade-backend-v-${{ github.sha }}", "before": "${{ github.event.before }}", "after": "${{ github.event.after }}", "branch": "development"}'
      - name: Trigger Frontend Build
        uses: peter-evans/repository-dispatch@v1
        if: always() && env.BUILD_FRONTEND == 'true'
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ github.repository }}
          event-type: trigger-frontend-build
          client-payload: '{"tag": "upgrade-frontend-v-${{ github.sha }}", "before": "${{ github.event.before }}", "after": "${{ github.event.after }}", "branch": "development"}'
      - name: Trigger Lambda Build
        uses: peter-evans/repository-dispatch@v1
        if: always() && env.BUILD_LAMBDA == 'true'
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ github.repository }}
          event-type: trigger-lambda-build
          client-payload: '{"tag": "lambda-frontend-v-${{ github.sha }}", "before": "${{ github.event.before }}", "after": "${{ github.event.after }}", "branch": "development"}'