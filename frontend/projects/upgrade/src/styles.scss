@use '@angular/material' as mat;

@import '@danielmoncada/angular-datetime-picker/assets/style/picker.min.css';
@import url('https://fonts.googleapis.com/css?family=Roboto:400,700|Material+Icons');
@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,600,700,800&display=swap');
@import 'jsoneditor/dist/jsoneditor.min.css';
@include mat.all-component-typographies();
@include mat.core();

@import './styles/variables.scss';
@import './themes/light-theme';
@import './styles/utility.scss';
@import './styles/shared-modal.scss';
@import './app/features/dashboard/dashboard-root/dashboard-root.theme.scss';
@import './app/features/dashboard/home/root/home.theme.scss';
@import './app/features/dashboard/home/components/experiment-list/experiment-list.theme.scss';
@import './app/features/dashboard/home/pages/view-experiment/view-experiment.theme.scss';
@import './app/features/dashboard/home/components/modal/experiment-status/experiment-status.theme.scss';
@import './app/features/dashboard/home/components/modal/post-experiment-rule/post-experiment-rule.theme.scss';
@import './app/features/dashboard/home/components/experiment-design/experiment-design.theme.scss';
@import './app/features/dashboard/home/components/experiment-design/payloads-table/payloads-table.theme.scss';
@import './app/features/dashboard/home/components/enrollment-over-time/enrollment-over-time.theme.scss';
@import './app/features/dashboard/home/components/modal/new-experiment/new-experiment.theme.scss';
@import './app/features/dashboard/profile/components/profile-info/profile-info.theme.scss';
@import './app/features/dashboard/profile/components/modals/new-user/new-user.theme.scss';
@import './app/features/dashboard/experiment-users/components/experiment-users/experiment-users.theme.scss';
@import './app/features/dashboard/experiment-users/components/preview-user/preview-user.theme.scss';
@import './app/features/dashboard/logs/common/logs-view.theme.scss';
@import './app/features/dashboard/common/tabs-view.theme.scss';
@import './app/features/auth/login/login.theme.scss';
@import './app/features/dashboard/segments/segments-root/segments-root.theme.scss';
@import './app/features/dashboard/segments/components/segments-list/segments-list.theme.scss';
@import './app/features/dashboard/segments/components/modal/new-segment/new-segment.theme.scss';
@import './app/features/dashboard/segments/components/segment-members/segment-members.theme.scss';
@import './app/features/dashboard/segments/pages/view-segment/view-segment.theme.scss';
@import './app/features/dashboard/home/components/modal/queries-modal/queries-modal.theme.scss';
@import './app/shared/components/query-result/query-result.theme.scss';
@import './app/features/dashboard/profile/components/metrics/metrics.theme.scss';
@import './app/features/dashboard/profile/components/modals/add-metrics/add-metrics.theme.scss';
@import './app/features/dashboard/home/components/experiment-query-result/experiment-query-result.theme.scss';
@import './app/features/dashboard/home/components/modal/experiment-end-criteria/experiment-ending-criteria.theme.scss';
@import './app/features/dashboard/home/components/modal/import-experiment/import-experiment.theme.scss';
@import './app/features/dashboard/home/components/modal/state-time-logs/state-time-logs.theme.scss';
@import './app/features/dashboard/segments/components/modal/import-segment/import-segment.theme.scss';
@import './app/features/dashboard/experiment-users/components/stratification-factor-list/import-stratifications/import-stratifications.theme.scss';
@import './app/features/dashboard/experiment-users/components/stratification-factor-list/delete-stratification/delete-stratification.theme.scss';
@import './app/features/dashboard/segments/components/modal/segment-experiment-list/segment-experiment-list.theme.scss';

@mixin custom-components-theme($theme) {
  @include dashboard-component-theme($theme);
  @include home-component-theme($theme);
  @include experiment-list-component-theme($theme);
  @include view-experiment-component-theme($theme);
  @include experiment-status-component-theme($theme);
  @include post-experiment-rule-component-theme($theme);
  @include experiment-design-component-theme($theme);
  @include payloads-table-component-theme($theme);
  @include enrollment-over-time-component-theme($theme);
  @include new-experiment-component-theme($theme);
  @include experiment-users-component-theme($theme);
  @include profile-info-component-theme($theme);
  @include new-user-component-theme($theme);
  @include preview-user-component-theme($theme);
  @include logs-view-component-theme($theme);
  @include tabs-view-theme($theme);
  @include login-component-theme($theme);
  @include view-segment-component-theme($theme);
  @include segments-root-component-theme($theme);
  @include segments-list-component-theme($theme);
  @include new-segment-component-theme($theme);
  @include segment-members-component-theme($theme);
  @include queries-modal-component-theme($theme);
  @include query-result-component-theme($theme);
  @include metrics-component-theme($theme);
  @include experiment-query-result-component-theme($theme);
  @include experiment-ending-criteria-component-theme($theme);
  @include import-experiment-component-theme($theme);
  @include state-time-logs-modal-component-theme($theme);
  @include import-segment-component-theme($theme);
  @include import-stratifications-component-theme($theme);
  @include delete-stratifications-component-theme($theme);
  @include segment-experiment-list-modal-component-theme($theme);
}

.light-theme {
  @include mat.all-component-themes($light-theme);
  @include custom-components-theme($light-theme);
}

.dense-1 {
  @include mat.all-component-densities(-1);
}

.dense-2 {
  @include mat.all-component-densities(-2);
}

.dense-3 {
  @include mat.all-component-densities(-3);
}

.dense-4 {
  @include mat.all-component-densities(-4);
}

// TODO material specific style which cannot be changed by scope
.mat-drawer-inner-container {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

button[mat-button],
button[mat-raised-button],
button[mat-flat-button],
button[mat-stroked-button],
button[mat-icon-button] {
  span {
    letter-spacing: normal;
  }
}

.default-button {
  background-color: var(--blue) !important;
  padding: 0 1rem;
  color: var(--white) !important;
  font-family: 'Open Sans';
  font-weight: 600;

  &--disabled {
    opacity: 0.7;
    pointer-events: none;
  }
}

.delete-modal,
.import-experiment-modal,
.import-segment-modal,
.import-stratification-modal,
.experiment-general-modal,
.new-experiment-modal,
.new-flag-modal,
.new-segment-modal,
.new-user-modal,
.queries-modal,
.export-modal,
.query-result,
.add-metric-modal,
.duplicate-segment-modal,
.experiment-ending-criteria {
  @include custom-components-theme($light-theme);
  border-radius: 7px;
  box-shadow: 0 0 8px 8px rgba(0, 0, 0, 0.12);

  .mat-mdc-dialog-container {
    padding: 0px !important;
    overflow: hidden !important;
    background-color: white;
    border-radius: 7px;

    .mat-mdc-dialog-surface {
      box-shadow: none;
      background-color: transparent;

      .mat-mdc-dialog-content {
        padding: 40px 40px 20px 40px;
      }

      .mat-mdc-dialog-actions {
        padding: 0 40px 40px;
      }
    }
  }
}

.segment-experiment-list-modal,
.state-time-logs-modal {
  border-radius: 7px;

  .mat-mdc-dialog-container {
    padding: 0px;
  }
}

.delete-modal {
  width: 400px;
  min-height: 192px;

  .mat-mdc-dialog-container {
    padding: 40px;
  }
}

.duplicate-segment-modal {
  width: 700px;
  min-height: 192px;

  .mat-mdc-dialog-container {
    padding: 40px;
  }
}

.import-segment-modal,
.import-experiment-modal,
.import-stratification-modal {
  width: 500px;
}

.experiment-general-modal,
.add-metric-modal {
  width: 804px;
  min-height: 294px;
}

.experiment-ending-criteria {
  width: 600px;
  min-height: 400px;
}

.segment-experiment-list-modal {
  width: 700px;
}

.state-time-logs-modal {
  width: 400px;
}

.query-result {
  width: 600px;
  min-height: 300px;
}

.new-experiment-modal {
  height: 775px;
  width: 1000px;
}

.queries-modal {
  width: 1000px;
}

.export-modal {
  width: 700px;
}

.new-flag-modal {
  width: 844px;
}

.new-segment-modal {
  width: 844px;
  height: 505px;
}

.new-user-modal {
  width: 805px;
}

.form-standard {
  display: flex;
  flex-direction: column;
  row-gap: 16px;
  padding: 32px 32px 16px;
}

.form-hint {
  color: var(--dark-grey);
}

.learn-more-link {
  color: var(--blue);
  text-decoration: underline;
}


.mat-mdc-checkbox {
  .mdc-checkbox {
    transform: scale(0.889); // transform 18px to 16px
  }

  .checkbox-label {
    margin-left: -8px;
    color: var(--black-2);
    user-select: none;
  }
}

.mat-mdc-chip {
  .mdc-evolution-chip__cell .mat-mdc-chip-action {
    padding: 2px 8px;
  }

  .chip-label {
    font-family: 'Roboto';
    font-size: 12px;
    font-weight: 400;
    color: var(--black-2);
  }

  &.status-indicator {
    .chip-label {
      font-weight: 500;
      color: inherit;
    }
  }
}

.mat-mdc-list-item {
  .list-item-label {
    color: var(--black-2);
  }
}

.mdc-text-field.mdc-text-field--filled,
.mat-mdc-option {
  background-color: white !important;
}

.mat-mdc-radio-button {
  .mdc-radio {
    margin-left: -10px;
  }

  .radio-button-label {
    margin-left: -6px;
    color: var(--black-2);
    user-select: none;
  }
}

.mat-mdc-slide-toggle {
  &:has(.mdc-switch--disabled) {
    cursor: not-allowed;

    .mdc-label {
      margin-left: 5px;
      color: var(--dark-grey) !important;
      cursor: not-allowed;
    }
  }

  .mdc-switch--disabled {
    cursor: not-allowed !important;

    &.mdc-switch--unselected {
      .mdc-switch__track {
        opacity: 1.0 !important;
        &::before {
          background: var(--mdc-switch-unselected-track-color) !important;
        }
      }

      .mdc-switch__shadow {
        background: var(--mdc-switch-unselected-handle-color) !important;
      }

      .mdc-switch__icons {
        opacity: 1.0 !important;
      }
    }

    &.mdc-switch--selected {
      .mdc-switch__track {
        opacity: 1.0 !important;
        &::after {
          background: var(--mdc-switch-selected-track-color) !important;
        }
      }

      .mdc-switch__shadow {
        background: var(--mdc-switch-selected-handle-color) !important;
      }

      .mdc-switch__icons {
        opacity: 1.0 !important;
      }
    }
  }
}

// Material library doesn't expose any params to prevent content truncation for these widgets.
// Therefore we override the css. If option appears in future, these can go away.

// Added to globally prevent truncation of content dropdowns
.mat-mdc-select-panel-wrap .mat-select-panel {
  max-width: fit-content;
}

// Added to globally prevent truncation in tooltips
.mat-mdc-tooltip {
  word-break: break-all;
  white-space: normal;
}

// Added to globally prevent tooltips from blocking click-events
.mat-mdc-tooltip-panel {
  pointer-events: none;
}

.mat-mdc-form-field {
  .mdc-text-field .mat-mdc-form-field-flex {
    .mdc-notched-outline .mdc-floating-label {
      top: 21px;
    }

    .mat-mdc-form-field-infix {
      min-height: auto;
      padding: 10px 0;
    }
  }

  &.preview-input .mdc-text-field .mat-mdc-form-field-flex .mdc-notched-outline .mdc-floating-label {
    top: 18px;
  }
}

.mat-mdc-table {
  .mat-mdc-header-row,
  .mat-mdc-row {
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);

    &.mat-mdc-row:hover {
      background-color: transparent;
    }

    &.expandable-row {
      min-height: 0;
      height: auto;
      overflow: hidden;
    }

    .mat-mdc-header-cell,
    .mat-mdc-cell {
      background-color: transparent;
      border-bottom: none;
      letter-spacing: normal;

      .mat-mdc-form-field .mdc-text-field {
        padding: 0 8px;

        .mat-mdc-form-field-flex .mat-mdc-form-field-infix {
          padding: 4px 0;
        }
      }

      &:not(:first-child):not(:last-child) {
        padding-left: 0;
        padding-right: 0;
      }
    }
  }
}

.mat-mdc-tab-group {
  .mat-mdc-tab-header {
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);

    .mat-mdc-tab-header-pagination {
      box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 4px -1px, rgba(0, 0, 0, 0.14) 0px 4px 5px 0px,
        rgba(0, 0, 0, 0.12) 0px 1px 10px 0px;
    }

    .mat-mdc-tab-label-container .mat-mdc-tab-labels .mat-mdc-tab {
      margin: 20px 0;
      min-width: 160px;

      &:first-of-type {
        margin-left: 34px;
      }

      .tab-label {
        color: var(--grey-2);
        user-select: none;
      }

      opacity: 0.6;

      &.mdc-tab--active {
        opacity: 1;

        .tab-label {
          color: var(--blue);
        }
      }

      .mdc-tab-indicator .mdc-tab-indicator__content {
        margin-bottom: -20px;
      }
    }
  }

  &.new-tab-group {
    .mat-mdc-tab-header {
      border-bottom: none;

      .mat-mdc-tab-label-container .mat-mdc-tab-labels .mat-mdc-tab {
        margin: 8px 0;

        .mdc-tab-indicator .mdc-tab-indicator__content {
          margin-bottom: -8px;
        }
      }
    }
  }
}

.cdk-overlay-pane {
  .mat-mdc-select-panel,
  .mat-mdc-autocomplete-panel {
    padding: 0;

    .mat-mdc-option:hover {
      background-color: rgba(0, 0, 0, 0.04) !important;
    }
  }
}

.json-editor-container {
  .jsoneditor {
    border: 0;
    height: 300px;
  }

  .jsoneditor-menu {
    display: none;
  }

  .ace-jsoneditor .ace_scroller {
    background-color: mat.get-color-from-palette($background, background);
  }

  .ace-jsoneditor .ace_gutter {
    background-color: mat.get-color-from-palette($background, background);
    color: mat.get-color-from-palette($foreground, text);
    border-right: 1px solid var(--blue);
  }

  .ace-jsoneditor .ace_text-layer {
    color: mat.get-color-from-palette($foreground, text);
  }

  .ace-jsoneditor .ace_variable {
    color: mat.get-color-from-palette($foreground, text);
  }

  .ace-jsoneditor .ace_gutter-active-line {
    color: mat.get-color-from-palette($foreground, text);
    background-color: transparent;
  }

  .ace-jsoneditor .ace_marker-layer .ace_active-line {
    color: mat.get-color-from-palette($foreground, text);
    background-color: transparent;
  }

  .ace-jsoneditor .ace_string {
    color: mat.get-color-from-palette($foreground, text);
  }
}
